# 최소 한 칸 이상 떨어진 창고 약탈
# 최대한 많은 식량 약탈
# 식량창고 N개

n = 4
arr = [1, 3, 1, 5]

# n 만큼의 dp 초기화
dp = [0] * n
# 첫 번째 창고만 터는 경우
dp[0] = arr[0]
# 첫 번째 창고에 식량이 더 많으면 두 번째 창고는 털지 않는다. (첫 번째 창고를 턴다고 기록)
dp[1] = max(arr[0], arr[1])

# 세 번째 창고부터 계산
for i in range(2, n):
  # 직전 창고를 터는 경우와 i - 2번째 창고를 터는 경우를 비교
  # i - 2번째 창고를 털 때는 현재 창고도 같이 털 수 있다.
  # 두 경우의 수 중 큰 수를 기록
  dp[i] = max(dp[i - 1], dp[i - 2] + arr[i])

print(dp[n - 1])